#+title: Emacs From Scratch Configuration
#+PROPERTY: header-args:emacs-lisp :tangle /home/tedflint/.emacs.d/init.el :mkdirp yes

* Welcome!

This is the configuration used on the HP Pavilion as at 16 October 2022

This is the configuration we've been building in the *Emacs From Scratch* series, now written as an Org Mode document.  This file generates [[file:init.el][init.el]] which can be loaded by Emacs at startup.

*NOTE:* If you run into any issues while using this configuration, please [[https://github.com/daviwil/emacs-from-scratch/issues/new][file an issue]] or send me an email at =david at systemcrafters.cc=.

The following variables are used to tweak some of the configuration pieces for use in the live streams so you might need to adjust them for your local machine if you try to use this configuration directly.

#+begin_src emacs-lisp
;;  This is the configuration used on the Lenovo T440p as at Friday 16 September 2022
  
  ;; NOTE: init.el is now generated from Emacs.org.  Please edit that file
  ;;       in Emacs and init.el will be generated automatically!

  ;; You will most likely need to adjust this font size for your system!
  (defvar efs/default-font-size 233)
  (defvar efs/default-variable-font-size 233)

  ;; Make frame transparency overridable
  (defvar efs/frame-transparency '(100 . 100))

  (setq byte-compile-warnings '(not obsolete)) ;;gets rid of the "cl is deprecated" warning
#+end_src

#+RESULTS:

* Tips for Use

In this document I've added links in many places that lead you to documentation for the various packages we use.  If you're looking at this file in Emacs, you can put your cursor on a link and press =C-c C-o= or run =M-x org-open-at-point= to open the link in your web browser.

* Package System Setup

Emacs has a built in package manager but it doesn't make it easy to automatically install packages on a new system the first time you pull down your configuration.  [[https://github.com/jwiegley/use-package][use-package]] is a really helpful package used in this configuration to make it a lot easier to automate the installation and configuration of everything else we use.

#+begin_src emacs-lisp

  ;; Initialize package sources
  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))
  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

    ;; Initialize use-package on non-Linux platforms
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)

#+end_src

** Automatic Package Updates

The auto-package-update package helps us keep our Emacs packages up to date!  It will prompt you after a certain number of days either at startup or at a specific time of day to remind you to update your packages.

You can also use =M-x auto-package-update-now= to update right now!

#+begin_src emacs-lisp

  (use-package auto-package-update
    :custom
    (auto-package-update-interval 7)
    (auto-package-update-prompt-before-update t)
    (auto-package-update-hide-results t)
    :config
    (auto-package-update-maybe))
    (auto-package-update-at-time "09:00")

#+end_src

** Load the custom.el file.  This is also symbolically linked to .emacs.d/custom.el
#+begin_src emacs-lisp
(setq custom-file "/home/tedflint/Dropbox/emacs/config/custom.el")
(load custom-file)
#+end_src

* Keep Folders Clean

We use the [[https://github.com/emacscollective/no-littering/blob/master/no-littering.el][no-littering]] package to keep folders where we edit files and the Emacs configuration folder clean!  It knows about a wide variety of variables for built in Emacs features as well as those from community packages so it can be much easier than finding and setting these variables yourself.

#+begin_src emacs-lisp

  ;; NOTE: If you want to move everything out of the ~/.emacs.d folder
  ;; reliably, set `user-emacs-directory` before loading no-littering!
  ;(setq user-emacs-directory "~/.cache/emacs")

  (use-package no-littering)

  ;; no-littering doesn't set this by default so we must place
  ;; auto save files in the same path as it uses for sessions
  (setq auto-save-file-name-transforms
        `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))

#+end_src

* Basic UI Configuration

This section configures basic UI settings that remove unneeded elements to make Emacs look a lot more minimal and modern.  If you're just getting started in Emacs, the menu bar might be helpful so you can remove the =(menu-bar-mode -1)= line if you'd like to still see that.

#+begin_src emacs-lisp

  (setq inhibit-startup-message t)

  (scroll-bar-mode -1)        ; Disable visible scrollbar
  (tool-bar-mode -1)          ; Disable the toolbar
  (tooltip-mode -1)           ; Disable tooltips
  (set-fringe-mode 10)        ; Give some breathing room
  (menu-bar-mode -1)            ; Disable the menu bar

  ;; Set up the visible bell
  (setq visible-bell t)

  (column-number-mode)
;;  (global-display-line-numbers-mode t) ;;not applicable until emacs 26 apparently

  ;; Set frame transparency
  (set-frame-parameter (selected-frame) 'alpha efs/frame-transparency)
  (add-to-list 'default-frame-alist `(alpha . ,efs/frame-transparency))
  (set-frame-parameter (selected-frame) 'fullscreen 'maximized)
  (add-to-list 'default-frame-alist '(fullscreen . maximized))
 
  ;; Disable line numbers for some modes
  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  shell-mode-hook
                  treemacs-mode-hook
                  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

#+end_src

#+RESULTS:
| 1                | light          | variable-pitch | 1.5 |
| agenda-date      | 1.3            |                |     |
| agenda-structure | variable-pitch | light          | 1.8 |
| t                | medium         |                |     |

*** Basic Config

This section contains the basic configuration for =org-mode= plus the configuration for Org agenda and capture templates.  There's a lot to unpack in here so I'd recommend watching the videos for [[https://youtu.be/VcgjTEa0kU4][Part 5]] and [[https://youtu.be/PNE-mgkZ6HM][Part 6]] for a full explanation.

#+begin_src emacs-lisp

    (defun efs/org-mode-setup ()
      (org-indent-mode)
      (variable-pitch-mode 1)
      (visual-line-mode 1))

    (use-package org
      :hook (org-mode . efs/org-mode-setup)
      :config
        (setq org-ellipsis " ... ")

        (setq org-agenda-span 'month)
        (setq org-agenda-files
              '("~/Dropbox/emacs/org/agenda.org"
                "~/Dropbox/emacs/org/todo.org"))

        (setq org-todo-keywords
          '((sequence "TODO(t)" "NEXT(n)" "|" "HOLD(h)" "SOMEDAY(s)" "CANCELLED(c)" "DONE(d)")
           )))

        ;; Save Org buffers after refiling!
        (advice-add 'org-refile :after 'org-save-all-org-buffers)
  
       (setq org-agenda-diary-file "~/.emacs.d/var/diary")
       (setq org-agenda-include-diary t)
       (setq diary-show-holidays-flag nil)

#+end_src

#+RESULTS:

*** Nicer Heading Bullets

[[https://github.com/sabof/org-bullets][org-bullets]] replaces the heading stars in =org-mode= buffers with nicer looking characters that you can control.  Another option for this is [[https://github.com/integral-dw/org-superstar-mode][org-superstar-mode]] which we may cover in a later video.

#+begin_src emacs-lisp

  (use-package org-bullets
    :after org
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

#+end_src

*** Center Org Buffers

We use [[https://github.com/joostkremers/visual-fill-column][visual-fill-column]] to center =org-mode= buffers for a more pleasing writing experience as it centers the contents of the buffer horizontally to seem more like you are editing a document.  This is really a matter of personal preference so you can remove the block below if you don't like the behavior.

#+begin_src emacs-lisp

    (defun efs/org-mode-visual-fill ()
      (setq visual-fill-column-width 100
            visual-fill-column-center-text t)
      (visual-fill-column-mode 1))

    (use-package visual-fill-column
      :hook (org-mode . efs/org-mode-visual-fill))

#+end_src

#+RESULTS:
| org-pdftools-setup-link | #[0 \301\211\207 [imenu-create-index-function org-imenu-get-tree] 2] | (lambda nil (add-hook 'after-save-hook #'efs/org-babel-tangle-config)) | org-bullets-mode | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-show-all append local] 5] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-babel-show-result-all append local] 5] | org-babel-result-hide-spec | org-babel-hide-all-hashes | efs/org-mode-visual-fill | efs/org-mode-setup | (lambda nil (display-line-numbers-mode 0)) |

** Configure Babel Languages

To execute or export code in =org-mode= code blocks, you'll need to set up =org-babel-load-languages= for each language you'd like to use.  [[https://orgmode.org/worg/org-contrib/babel/languages.html][This page]] documents all of the languages that you can use with =org-babel=.

#+begin_src emacs-lisp

  (org-babel-do-load-languages
    'org-babel-load-languages
    '((emacs-lisp . t)
      (python . t)
      (scheme .t)
      (sqlite .t)
      (shell . t)))

  (push '("conf-unix" . conf-unix) org-src-lang-modes)

#+end_src

#+RESULTS:
: ((conf-unix . conf-unix) (plantuml . plantuml) (conf-unix . conf-unix) (C . c) (C++ . c++) (asymptote . asy) (bash . sh) (beamer . latex) (calc . fundamental) (cpp . c++) (ditaa . artist) (dot . fundamental) (elisp . emacs-lisp) (ocaml . tuareg) (screen . shell-script) (shell . sh) (sqlite . sql))

** Structure Templates

Org Mode's [[https://orgmode.org/manual/Structure-Templates.html][structure templates]] feature enables you to quickly insert code blocks into your Org files in combination with =org-tempo= by typing =(less than symbol)= followed by the template name like =el= or =py= and then press =TAB=.  For example, to insert an empty =emacs-lisp= block below, you can type =(less than sign)el= and press =TAB= to expand into such a block.

You can add more =src= block templates below by copying one of the lines and changing the two strings at the end, the first to be the template name and the second to contain the name of the language [[https://orgmode.org/worg/org-contrib/babel/languages.html][as it is known by Org Babel]].

#+begin_src emacs-lisp

  ;; This is needed as of Org 9.2
 ;; (require 'org-tempo)

  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))
  (add-to-list 'org-structure-template-alist '("sc" . "src scheme"))
#+end_src

#+RESULTS:
: ((sc . src scheme) (py . src python) (el . src emacs-lisp) (sh . src shell) (a . export ascii) (c . center) (C . comment) (e . example) (E . export) (h . export html) (l . export latex) (q . quote) (s . src) (v . verse))

** Auto-tangle Configuration Files

This snippet adds a hook to =org-mode= buffers so that =efs/org-babel-tangle-config= gets executed each time such a buffer gets saved.  This function checks to see if the file being saved is the Emacs.org file you're looking at right now, and if so, automatically exports the configuration here to the associated output files.

#+begin_src emacs-lisp
  
  ;; Automatically tangle our Emacs.org config file when we save it
  (defun efs/org-babel-tangle-config ()
    (when (string-equal (file-name-directory (buffer-file-name))
                        (expand-file-name user-emacs-directory))
      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))
  
  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'efs/org-babel-tangle-config)))
  
#+end_src

* UI Configuration

** Better Modeline

[[https://github.com/seagle0128/doom-modeline][doom-modeline]] is a very attractive and rich (yet still minimal) mode line configuration for Emacs.  The default configuration is quite good but you can check out the [[https://github.com/seagle0128/doom-modeline#customize][configuration options]] for more things you can enable or disable.

*NOTE:* The first time you load your configuration on a new machine, you'll need to run `M-x all-the-icons-install-fonts` so that mode line icons display correctly.

#+begin_src emacs-lisp

(use-package all-the-icons)

(use-package doom-modeline
  :init (doom-modeline-mode 1)
  :custom ((doom-modeline-height 15)))

#+end_src

#+RESULTS:

** Which Key

[[https://github.com/justbur/emacs-which-key][which-key]] is a useful UI panel that appears when you start pressing any key binding in Emacs to offer you all possible completions for the prefix.  For example, if you press =C-c= (hold control and press the letter =c=), a panel will appear at the bottom of the frame displaying all of the bindings under that prefix and which command they run.  This is very useful for learning the possible key bindings in the mode of your current buffer.

#+begin_src emacs-lisp

(use-package which-key
  :init (which-key-mode)
  :diminish which-key-mode
  :config
  (setq which-key-idle-delay .5))

#+end_src

* Vertico
#+begin_src emacs-lisp

  ;; Enable vertico
  (use-package vertico
    :init
    (vertico-mode)

    ;; Different scroll margin
   (setq vertico-scroll-margin 0)

    ;; Show more candidates
   (setq vertico-count 20)

    ;; Grow and shrink the Vertico minibuffer
    (setq vertico-resize t)

    ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
    (setq vertico-cycle t)
    )

  ;; Optionally use the `orderless' completion style. See
  ;; `+orderless-dispatch' in the Consult wiki for an advanced Orderless style
  ;; dispatcher. Additionally enable `partial-completion' for file path
  ;; expansion. `partial-completion' is important for wildcard support.
  ;; Multiple files can be opened at once with `find-file' if you enter a
  ;; wildcard. You may also give the `initials' completion style a try.
  (use-package orderless
    :init
    ;; Configure a custom style dispatcher (see the Consult wiki)
    ;; (setq orderless-style-dispatchers '(+orderless-dispatch)
    ;;       orderless-component-separator #'orderless-escapable-split-on-space)
    (setq completion-styles '(orderless)
          completion-category-defaults nil
          completion-category-overrides '((file (styles partial-completion)))))

  ;; Persist history over Emacs restarts. Vertico sorts by history position.
  (use-package savehist
    :init
    (savehist-mode))

  ;; Enable richer annotations using the Marginalia package
  (use-package marginalia
    ;; Either bind `marginalia-cycle` globally or only in the minibuffer
    :bind (("M-A" . marginalia-cycle)
           :map minibuffer-local-map
           ("M-A" . marginalia-cycle))
    ;; The :init configuration is always executed (Not lazy!)
    :init
    ;; Must be in the :init section of use-package such that the mode gets
    ;; enabled right away. Note that this forces loading the package.
    (marginalia-mode))

#+end_src

#+RESULTS:
: marginalia-cycle

** Helpful Help Commands

[[https://github.com/Wilfred/helpful][Helpful]] adds a lot of very helpful (get it?) information to Emacs' =describe-= command buffers.  For example, if you use =describe-function=, you will not only get the documentation about the function, you will also see the source code of the function and where it gets used in other places in the Emacs configuration.  It is very useful for figuring out how things work in Emacs.

#+begin_src emacs-lisp

  (use-package helpful
    :bind
    ([remap describe-command] . helpful-command)
    ([remap describe-key] . helpful-key))

#+end_src

* Consult
#+begin_src emacs-lisp
;; Example configuration for Consult
(use-package consult
  ;; Replace bindings. Lazily loaded due by `use-package'.
  :bind (;; C-c bindings (mode-specific-map)
         ("C-c h" . consult-history)
         ("C-c m" . consult-mode-command)
         ("C-c k" . consult-kmacro)
         ;; C-x bindings (ctl-x-map)
         ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
         ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
         ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
         ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
         ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
         ;; Custom M-# bindings for fast register access
         ("M-#" . consult-register-load)
         ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
         ("C-M-#" . consult-register)
         ;; Other custom bindings
         ("M-y" . consult-yank-pop)                ;; orig. yank-pop
         ("<help> a" . consult-apropos)            ;; orig. apropos-command
         ;; M-g bindings (goto-map)
         ("M-g e" . consult-compile-error)
         ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
         ("M-g g" . consult-goto-line)             ;; orig. goto-line
         ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
         ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
         ("M-g m" . consult-mark)
         ("M-g k" . consult-global-mark)
         ("M-g i" . consult-imenu)
         ("M-g I" . consult-imenu-multi)
         ;; M-s bindings (search-map)
         ("M-s d" . consult-find)
         ("M-s D" . consult-locate)
         ("M-s g" . consult-grep)
         ("M-s G" . consult-git-grep)
         ("M-s r" . consult-ripgrep)
         ("C-s" . consult-line)
         ("M-s L" . consult-line-multi)
         ("M-s m" . consult-multi-occur)
         ("M-s k" . consult-keep-lines)
         ("M-s u" . consult-focus-lines)
         ;; isearch integration
         ("M-s e" . consult-isearch-history)
         :map isearch-mode-map
         ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
         ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
         ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
         ("M-s L" . consult-line-multi))           ;; needed by consult-line to detect isearch

  ;; Enable automatic preview at point in the *Completions* buffer. This is
  ;; relevant when you use the default completion UI. You may want to also
  ;; enable `consult-preview-at-point-mode` in Embark Collect buffers.
  :hook (completion-list-mode . consult-preview-at-point-mode)

  ;; The :init configuration is always executed (Not lazy)
  :init

  ;; Optionally configure the register formatting. This improves the register
  ;; preview for `consult-register', `consult-register-load',
  ;; `consult-register-store' and the Emacs built-ins.
  (setq register-preview-delay 0
        register-preview-function #'consult-register-format)

  ;; Optionally tweak the register preview window.
  ;; This adds thin lines, sorting and hides the mode line of the window.
  (advice-add #'register-preview :override #'consult-register-window)

  ;; Optionally replace `completing-read-multiple' with an enhanced version.
  (advice-add #'completing-read-multiple :override #'consult-completing-read-multiple)

  ;; Use Consult to select xref locations with preview
  (setq xref-show-xrefs-function #'consult-xref
        xref-show-definitions-function #'consult-xref)

  ;; Configure other variables and modes in the :config section,
  ;; after lazily loading the package.
  :config

  ;; Optionally configure preview. The default value
  ;; is 'any, such that any key triggers the preview.
  ;; (setq consult-preview-key 'any)
  ;; (setq consult-preview-key (kbd "M-."))
  ;; (setq consult-preview-key (list (kbd "<S-down>") (kbd "<S-up>")))
  ;; For some commands and buffer sources it is useful to configure the
  ;; :preview-key on a per-command basis using the `consult-customize' macro.
  (consult-customize
   consult-theme
   :preview-key '(:debounce 0.2 any)
   consult-ripgrep consult-git-grep consult-grep
   consult-bookmark consult-recent-file consult-xref
   consult--source-recent-file consult--source-project-recent-file consult--source-bookmark
   :preview-key (kbd "M-."))

  ;; Optionally configure the narrowing key.
  ;; Both < and C-+ work reasonably well.
  (setq consult-narrow-key "<") ;; (kbd "C-+")

  ;; Optionally make narrowing help available in the minibuffer.
  ;; You may want to use `embark-prefix-help-command' or which-key instead.
  ;; (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help)

  ;; Optionally configure a function which returns the project root directory.
  ;; There are multiple reasonable alternatives to chose from.
  ;;;; 1. project.el (project-roots)
  (setq consult-project-root-function
        (lambda ()
          (when-let (project (project-current))
            (car (project-roots project)))))
  ;;;; 2. projectile.el (projectile-project-root)
  ;; (autoload 'projectile-project-root "projectile")
  ;; (setq consult-project-root-function #'projectile-project-root)
  ;;;; 3. vc.el (vc-root-dir)
  ;; (setq consult-project-root-function #'vc-root-dir)
  ;;;; 4. locate-dominating-file
  ;; (setq consult-project-root-function (lambda () (locate-dominating-file "." ".git")))
)
#+end_src

#+RESULTS:
: consult-line-multi

* Org Mode

[[https://orgmode.org/][Org Mode]] is one of the hallmark features of Emacs.  It is a rich document editor, project planner, task and time tracker, blogging engine, and literate coding utility all wrapped up in one package.

* Development

** Languages

*** IDE Features with lsp-mode

**** lsp-mode

We use the excellent [[https://emacs-lsp.github.io/lsp-mode/][lsp-mode]] to enable IDE-like functionality for many different programming languages via "language servers" that speak the [[https://microsoft.github.io/language-server-protocol/][Language Server Protocol]].  Before trying to set up =lsp-mode= for a particular language, check out the [[https://emacs-lsp.github.io/lsp-mode/page/languages/][documentation for your language]] so that you can learn which language servers are available and how to install them.

The =lsp-keymap-prefix= setting enables you to define a prefix for where =lsp-mode='s default keybindings will be added.  I *highly recommend* using the prefix to find out what you can do with =lsp-mode= in a buffer.

The =which-key= integration adds helpful descriptions of the various keys so you should be able to learn a lot just by pressing =C-c l= in a =lsp-mode= buffer and trying different things that you find there.

#+begin_src emacs-lisp

  (defun efs/lsp-mode-setup ()
    (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
    (lsp-headerline-breadcrumb-mode))

  (use-package lsp-mode
    :commands (lsp lsp-deferred)
    :hook (lsp-mode . efs/lsp-mode-setup)
    :init
    (setq lsp-keymap-prefix "C-c l")  ;; Or 'C-l', 's-l'
    :config
    (lsp-enable-which-key-integration t))

#+end_src

**** lsp-ui

[[https://emacs-lsp.github.io/lsp-ui/][lsp-ui]] is a set of UI enhancements built on top of =lsp-mode= which make Emacs feel even more like an IDE.  Check out the screenshots on the =lsp-ui= homepage (linked at the beginning of this paragraph) to see examples of what it can do.

#+begin_src emacs-lisp

  (use-package lsp-ui
    :hook (lsp-mode . lsp-ui-mode)
    :custom
    (lsp-ui-doc-position 'bottom))

#+end_src

**** lsp-treemacs

[[https://github.com/emacs-lsp/lsp-treemacs][lsp-treemacs]] provides nice tree views for different aspects of your code like symbols in a file, references of a symbol, or diagnostic messages (errors and warnings) that are found in your code.

Try these commands with =M-x=:

- =lsp-treemacs-symbols= - Show a tree view of the symbols in the current file
- =lsp-treemacs-references= - Show a tree view for the references of the symbol under the cursor
- =lsp-treemacs-error-list= - Show a tree view for the diagnostic messages in the project

This package is built on the [[https://github.com/Alexander-Miller/treemacs][treemacs]] package which might be of some interest to you if you like to have a file browser at the left side of your screen in your editor.

#+begin_src emacs-lisp

  (use-package lsp-treemacs
    :after lsp)

#+end_src

**** lsp-ivy

[[https://github.com/emacs-lsp/lsp-ivy][lsp-ivy]] integrates Ivy with =lsp-mode= to make it easy to search for things by name in your code.  When you run these commands, a prompt will appear in the minibuffer allowing you to type part of the name of a symbol in your code.  Results will be populated in the minibuffer so that you can find what you're looking for and jump to that location in the code upon selecting the result.

Try these commands with =M-x=:

- =lsp-ivy-workspace-symbol= - Search for a symbol name in the current project workspace
- =lsp-ivy-global-workspace-symbol= - Search for a symbol name in all active project workspaces

#+begin_src emacs-lisp

  (use-package lsp-ivy)

#+end_src

*** TypeScript

This is a basic configuration for the TypeScript language so that =.ts= files activate =typescript-mode= when opened.  We're also adding a hook to =typescript-mode-hook= to call =lsp-deferred= so that we activate =lsp-mode= to get LSP features every time we edit TypeScript code.

#+begin_src emacs-lisp

  (use-package typescript-mode
    :mode "\\.ts\\'"
    :hook (typescript-mode . lsp-deferred)
    :config
    (setq typescript-indent-level 2))

#+end_src

*Important note!*  For =lsp-mode= to work with TypeScript (and JavaScript) you will need to install a language server on your machine.  If you have Node.js installed, the easiest way to do that is by running the following command:

#+begin_src shell :tangle no

npm install -g typescript-language-server typescript

#+end_src

This will install the [[https://github.com/theia-ide/typescript-language-server][typescript-language-server]] and the TypeScript compiler package.

*** Python

We use =lsp-mode= and =dap-mode= to provide a more complete development environment for Python in Emacs.  Check out [[https://emacs-lsp.github.io/lsp-mode/page/lsp-pyls/][the =pyls= configuration]] in the =lsp-mode= documentation for more details.

Make sure you have the =pyls= language server installed before trying =lsp-mode=!

#+begin_src sh :tangle no

pip install --user "python-language-server[all]"

#+end_src

There are a number of other language servers for Python so if you find that =pyls= doesn't work for you, consult the =lsp-mode= [[https://emacs-lsp.github.io/lsp-mode/page/languages/][language configuration documentation]] to try the others!

#+begin_src emacs-lisp
  (use-package python-mode
    :ensure t
    :hook (python-mode . lsp-deferred)
    :custom
    ;; NOTE: Set these if Python 3 is called "python3" on your system!
    (python-shell-interpreter "python3")
    (dap-python-executable "python3")
    (dap-python-debugger 'debugpy)
    :config
    (require 'dap-python))
(setq py-python-command "python3")

#+end_src

#+RESULTS:
: python3

You can use the pyvenv package to use =virtualenv= environments in Emacs.  The =pyvenv-activate= command should configure Emacs to cause =lsp-mode= and =dap-mode= to use the virtual environment when they are loaded, just select the path to your virtual environment before loading your project.

#+begin_src emacs-lisp

  (use-package pyvenv
    :config
    (pyvenv-mode 1))

#+end_src

** Company Mode

[[http://company-mode.github.io/][Company Mode]] provides a nicer in-buffer completion interface than =completion-at-point= which is more reminiscent of what you would expect from an IDE.  We add a simple configuration to make the keybindings a little more useful (=TAB= now completes the selection and initiates completion at the current location if needed).

We also use [[https://github.com/sebastiencs/company-box][company-box]] to further enhance the look of the completions with icons and better overall presentation.

#+begin_src emacs-lisp

  (use-package company
    :after lsp-mode
    :hook (lsp-mode . company-mode)
    :bind (:map company-active-map
           ("<tab>" . company-complete-selection))
          (:map lsp-mode-map
           ("<tab>" . company-indent-or-complete-common))
    :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.0))

  (use-package company-box
    :hook (company-mode . company-box-mode))

#+end_src

** Projectile

[[https://projectile.mx/][Projectile]] is a project management library for Emacs which makes it a lot easier to navigate around code projects for various languages.  Many packages integrate with Projectile so it's a good idea to have it installed even if you don't use its commands directly.

#+begin_src emacs-lisp

  (use-package projectile
    :diminish projectile-mode
    :config (projectile-mode)
    :custom ((projectile-completion-system 'ivy))
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :init
    ;; NOTE: Set this to the folder where you keep your Git repos!
    (when (file-directory-p "~/Projects/Code")
      (setq projectile-project-search-path '("~/Projects/Code")))
    (setq projectile-switch-project-action #'projectile-dired))

#+end_src

** Magit

[[https://magit.vc/][Magit]] is the best Git interface I've ever used.  Common Git operations are easy to execute quickly using Magit's command panel system.

#+begin_src emacs-lisp

  (use-package magit
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

  ;; NOTE: Make sure to configure a GitHub token before using this package!
  ;; - https://magit.vc/manual/forge/Token-Creation.html#Token-Creation
  ;; - https://magit.vc/manual/ghub/Getting-Started.html#Getting-Started
  (use-package forge)

#+end_src

#+RESULTS:
: t

** Rainbow Delimiters

[[https://github.com/Fanael/rainbow-delimiters][rainbow-delimiters]] is useful in programming modes because it colorizes nested parentheses and brackets according to their nesting depth.  This makes it a lot easier to visually match parentheses in Emacs Lisp code without having to count them yourself.

#+begin_src emacs-lisp

(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))

#+end_src

* Terminals

** term-mode

=term-mode= is a built-in terminal emulator in Emacs.  Because it is written in Emacs Lisp, you can start using it immediately with very little configuration.  If you are on Linux or macOS, =term-mode= is a great choice to get started because it supports fairly complex terminal applications (=htop=, =vim=, etc) and works pretty reliably.  However, because it is written in Emacs Lisp, it can be slower than other options like =vterm=.  The speed will only be an issue if you regularly run console apps with a lot of output.

One important thing to understand is =line-mode= versus =char-mode=.  =line-mode= enables you to use normal Emacs keybindings while moving around in the terminal buffer while =char-mode= sends most of your keypresses to the underlying terminal.  While using =term-mode=, you will want to be in =char-mode= for any terminal applications that have their own keybindings.  If you're just in your usual shell, =line-mode= is sufficient and feels more integrated with Emacs.

With =evil-collection= installed, you will automatically switch to =char-mode= when you enter Evil's insert mode (press =i=).  You will automatically be switched back to =line-mode= when you enter Evil's normal mode (press =ESC=).

Run a terminal with =M-x term!=

*Useful key bindings:*

- =C-c C-p= / =C-c C-n= - go back and forward in the buffer's prompts (also =[[= and =]]= with evil-mode)
- =C-c C-k= - Enter char-mode
- =C-c C-j= - Return to line-mode
- If you have =evil-collection= installed, =term-mode= will enter char mode when you use Evil's Insert mode

#+begin_src emacs-lisp

  (use-package term
    :config
    (setq explicit-shell-file-name "bash") ;; Change this to zsh, etc
    ;;(setq explicit-zsh-args '())         ;; Use 'explicit-<shell>-args for shell-specific args

    ;; Match the default Bash shell prompt.  Update this if you have a custom prompt
    (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *"))

#+end_src

*** Better term-mode colors

The =eterm-256color= package enhances the output of =term-mode= to enable handling of a wider range of color codes so that many popular terminal applications look as you would expect them to.  Keep in mind that this package requires =ncurses= to be installed on your machine so that it has access to the =tic= program.  Most Linux distributions come with this program installed already so you may not have to do anything extra to use it.

#+begin_src emacs-lisp

  (use-package eterm-256color
    :hook (term-mode . eterm-256color-mode))

#+end_src

** shell-mode

[[https://www.gnu.org/software/emacs/manual/html_node/emacs/Interactive-Shell.html#Interactive-Shell][shell-mode]] is a middle ground between =term-mode= and Eshell.  It is *not* a terminal emulator so more complex terminal programs will not run inside of it.  It does have much better integration with Emacs because all command input in this mode is handled by Emacs and then sent to the underlying shell once you press Enter.  This means that you can use =evil-mode='s editing motions on the command line, unlike in the terminal emulator modes above.

*Useful key bindings:*

- =C-c C-p= / =C-c C-n= - go back and forward in the buffer's prompts (also =[[= and =]]= with evil-mode)
- =M-p= / =M-n= - go back and forward in the input history
- =C-c C-u= - delete the current input string backwards up to the cursor    
- =counsel-shell-history= - A searchable history of commands typed into the shell

One advantage of =shell-mode= on Windows is that it's the only way to run =cmd.exe=, PowerShell, Git Bash, etc from within Emacs.  Here's an example of how you would set up =shell-mode= to run PowerShell on Windows:

#+begin_src emacs-lisp

  (when (eq system-type 'windows-nt)
    (setq explicit-shell-file-name "powershell.exe")
    (setq explicit-powershell.exe-args '()))

#+end_src

** Eshell

[[https://www.gnu.org/software/emacs/manual/html_mono/eshell.html#Contributors-to-Eshell][Eshell]] is Emacs' own shell implementation written in Emacs Lisp.  It provides you with a cross-platform implementation (even on Windows!) of the common GNU utilities you would find on Linux and macOS (=ls=, =rm=, =mv=, =grep=, etc).  It also allows you to call Emacs Lisp functions directly from the shell and you can even set up aliases (like aliasing =vim= to =find-file=).  Eshell is also an Emacs Lisp REPL which allows you to evaluate full expressions at the shell.

The downsides to Eshell are that it can be harder to configure than other packages due to the particularity of where you need to set some options for them to go into effect, the lack of shell completions (by default) for some useful things like Git commands, and that REPL programs sometimes don't work as well.  However, many of these limitations can be dealt with by good configuration and installing external packages, so don't let that discourage you from trying it!

*Useful key bindings:*

- =C-c C-p= / =C-c C-n= - go back and forward in the buffer's prompts (also =[[= and =]]= with evil-mode)
- =M-p= / =M-n= - go back and forward in the input history
- =C-c C-u= - delete the current input string backwards up to the cursor
- =counsel-esh-history= - A searchable history of commands typed into Eshell

We will be covering Eshell more in future videos highlighting other things you can do with it.

For more thoughts on Eshell, check out these articles by Pierre Neidhardt:
- https://ambrevar.xyz/emacs-eshell/index.html
- https://ambrevar.xyz/emacs-eshell-versus-shell/index.html

#+begin_src emacs-lisp

  (defun efs/configure-eshell ()
    ;; Save command history when commands are entered
    (add-hook 'eshell-pre-command-hook 'eshell-save-some-history)

    ;; Truncate buffer for performance
    (add-to-list 'eshell-output-filter-functions 'eshell-truncate-buffer)

    (setq eshell-history-size         10000
          eshell-buffer-maximum-lines 10000
          eshell-hist-ignoredups t
          eshell-scroll-to-bottom-on-input t))

  (use-package eshell-git-prompt)

  (use-package eshell
    :hook (eshell-first-time-mode . efs/configure-eshell)
    :config

    (with-eval-after-load 'esh-opt
      (setq eshell-destroy-buffer-when-process-dies t)
      (setq eshell-visual-commands '("htop" "zsh" "vim")))

    (eshell-git-prompt-use-theme 'powerline))


#+end_src

* File Management

** Dired

Dired is a built-in file manager for Emacs that does some pretty amazing things!  Here are some key bindings you should try out:
*** Key Bindings

**** Navigation

*Emacs* / *Evil*
- =n= / =j= - next line
- =p= / =k= - previous line
- =j= / =J= - jump to file in buffer
- =RET= - select file or directory
- =^= - go to parent directory
- =S-RET= / =g O= - Open file in "other" window
- =M-RET= - Show file in other window without focusing (previewing files)
- =g o= (=dired-view-file=) - Open file but in a "preview" mode, close with =q=
- =g= / =g r= Refresh the buffer with =revert-buffer= after changing configuration (and after filesystem changes!)

**** Marking files

- =m= - Marks a file
- =u= - Unmarks a file
- =U= - Unmarks all files in buffer
- =* t= / =t= - Inverts marked files in buffer
- =% m= - Mark files in buffer using regular expression
- =*= - Lots of other auto-marking functions
- =k= / =K= - "Kill" marked items (refresh buffer with =g= / =g r= to get them back)
- Many operations can be done on a single file if there are no active marks!
 
**** Copying and Renaming files

- =C= - Copy marked files (or if no files are marked, the current file)
- Copying single and multiple files
- =U= - Unmark all files in buffer
- =R= - Rename marked files, renaming multiple is a move!
- =% R= - Rename based on regular expression: =^test= , =old-\&=

*Power command*: =C-x C-q= (=dired-toggle-read-only=) - Makes all file names in the buffer editable directly to rename them!  Press =Z Z= to confirm renaming or =Z Q= to abort.

**** Deleting files

- =D= - Delete marked file
- =d= - Mark file for deletion
- =x= - Execute deletion for marks
- =delete-by-moving-to-trash= - Move to trash instead of deleting permanently

**** Creating and extracting archives

- =Z= - Compress or uncompress a file or folder to (=.tar.gz=)
- =c= - Compress selection to a specific file
- =dired-compress-files-alist= - Bind compression commands to file extension

**** Other common operations

- =T= - Touch (change timestamp)
- =M= - Change file mode
- =O= - Change file owner
- =G= - Change file group
- =S= - Create a symbolic link to this file
- =L= - Load an Emacs Lisp file into Emacs

*** Configuration

#+begin_src emacs-lisp

  (use-package dired
    :ensure nil
    :commands (dired dired-jump)
    :bind (("C-x C-j" . dired-jump))
    :custom ((dired-listing-switches "-agho --group-directories-first")))

  (use-package dired-single)

  (use-package all-the-icons-dired
    :hook (dired-mode . all-the-icons-dired-mode))

  (use-package dired-open
    :config
    ;; Doesn't work as expected!
    ;;(add-to-list 'dired-open-functions #'dired-open-xdg t)
    (setq dired-open-extensions '(("png" . "feh")
                                  ("mkv" . "mpv"))))

 #+end_src

* Applications

** Some App

This is an example of configuring another non-Emacs application using org-mode.  Not only do we write out the configuration at =.config/some-app/config=, we also compute the value that gets stored in this configuration from the Emacs Lisp block above it.

#+NAME: the-value
#+begin_src emacs-lisp :tangle no

  (+ 55 100)

#+end_src

*NOTE*: Set the =:tangle= parameter below to =.config/some-app/config= for this to work!

#+begin_src conf :tangle no :noweb yes

  value=<<the-value()>>

#+end_src

** Org Roam
#+begin_src emacs-lisp
  (use-package org-roam
    :ensure t
    :init
    (setq org-roam-v2-ack t)
    :custom
    (org-roam-directory "~/Dropbox/universe/zettelkasten")
    :bind (("C-c n l" . org-roam-buffer-toggle)
           ("C-c n f" . org-roam-node-find)
           ("C-c n i" . org-roam-node-insert)
           ("C-c n d" . org-roam-dailies-capture-today)
           ("C-c n j" . org-roam-dailies-goto-today))
    :config
    (org-roam-setup)
    (org-roam-db-autosync-mode))
    (setq org-roam-mode-sections
      (list #'org-roam-backlinks-section
            #'org-roam-reflinks-section
            #'org-roam-unlinked-references-section
            ))

     (add-to-list 'display-buffer-alist
             '("\\*org-roam\\*"
               (display-buffer-in-side-window)
               (side . right)
               (slot . 0)
               (window-width . 0.33)
               (window-parameters . ((no-other-window . t)
                                     (no-delete-other-windows . t)))))

#+end_src

#+RESULTS:
| \*org-roam\* | (display-buffer-in-side-window) | (side . right) | (slot . 0) | (window-width . 0.33) | (window-parameters (no-other-window . t) (no-delete-other-windows . t)) |

* LaTeX configuration

#+begin_src emacs-lisp
(setq org-latex-compiler "xelatex")
(setq org-latex-pdf-process
      (list (concat "latexmk -"
                    org-latex-compiler 
                    " -recorder -synctex=1 -bibtex-cond %b")))
(setq org-latex-listings t)
(setq org-latex-default-packages-alist
      '(("" "graphicx" t)
        ("" "grffile" t)
        ("" "longtable" nil)
        ("" "wrapfig" nil)
        ("" "rotating" nil)
        ("normalem" "ulem" t)
        ("" "amsmath" t)
        ("" "textcomp" t)
        ("" "amssymb" t)
        ("" "capt-of" nil)
        ("" "hyperref" nil)))

#+end_src

#+RESULTS:
|          | graphicx  | t   |
|          | grffile   | t   |
|          | longtable | nil |
|          | wrapfig   | nil |
|          | rotating  | nil |
| normalem | ulem      | t   |
|          | amsmath   | t   |
|          | textcomp  | t   |
|          | amssymb   | t   |
|          | capt-of   | nil |
|          | hyperref  | nil |

* Feed reader elfeed
#+begin_src emacs-lisp
    (use-package elfeed
      :ensure t
      :commands (elfeed))
    (global-set-key (kbd "C-x w") 'elfeed)
    ;; Somewhere in your .emacs file
  (setq elfeed-feeds
        '("http://nullprogram.com/feed/"
          "https://planet.emacslife.com/atom.xml"
        ("http://nullprogram.com/feed/" blog emacs)
        "http://www.50ply.com/atom.xml"  ; no autotagging
        "https://www.theguardian.com/profile/marinahyde/rss"
        "https://www.theguardian.com/profile/andrewrawnsley/rss"
        "https://www.theguardian.com/profile/johncrace/rss"
        "https://www.theguardian.com/profile/nickcohen/rss"
        "https://www.theguardian.com/profile/simonjenkins/rss"
        "https://www.theguardian.com/profile/rafaelbehr/rss"
        "https://www.theguardian.com/profile/jessicaelgot/rss"
        "https://www.theguardian.com/profile/heatherstewart/rss"
        "https://www.theguardian.com/profile/nesrinemalik/rss"
        "https://www.theguardian.com/environment/rss"
        "https://www.independent.co.uk/environment/rss"
        "https://www.theguardian.com/travel/volunteering"
        "http://www.rspb.org.uk/rss/news/all.aspx"
        "http://www.rspb.org.uk/rss/news/farming.aspx"
        "http://www.rspb.org.uk/rss/news/conservation.aspx"
        "https://dindi.garjola.net/rss.xml"
        "https://joy.pm/index.xml"
        "http://feeds.bbci.co.uk/news/rss.xml?edition=uk"
        "https://hackerspace.lifehacker.com/rss"
        "https://lifehacker.biz/tag/internet/feed/"
        "https://lifehacker.biz/tage/howto/feed/"
        "https://feeds/gawker.com/lifehacker/full"
        ))
#+end_src

#+RESULTS:
| http://nullprogram.com/feed/ | https://planet.emacslife.com/atom.xml | (http://nullprogram.com/feed/ blog emacs) | http://www.50ply.com/atom.xml | https://www.theguardian.com/profile/marinahyde/rss | https://www.theguardian.com/profile/andrewrawnsley/rss | https://www.theguardian.com/profile/johncrace/rss | https://www.theguardian.com/profile/nickcohen/rss | https://www.theguardian.com/profile/simonjenkins/rss | https://www.theguardian.com/profile/rafaelbehr/rss | https://www.theguardian.com/profile/jessicaelgot/rss | https://www.theguardian.com/profile/heatherstewart/rss | https://www.theguardian.com/profile/nesrinemalik/rss | https://www.theguardian.com/environment/rss | https://www.independent.co.uk/environment/rss | https://www.theguardian.com/travel/volunteering | http://www.rspb.org.uk/rss/news/all.aspx | http://www.rspb.org.uk/rss/news/farming.aspx | http://www.rspb.org.uk/rss/news/conservation.aspx | https://dindi.garjola.net/rss.xml | https://joy.pm/index.xml | http://feeds.bbci.co.uk/news/rss.xml?edition=uk | https://hackerspace.lifehacker.com/rss | https://lifehacker.biz/tag/internet/feed/ | https://lifehacker.biz/tage/howto/feed/ | https://feeds/gawker.com/lifehacker/full |

* Set default browser to eww
#+begin_src emacs-lisp
(setq browse-url-browser-function 'browse-url-firefox) ; emacs browser
#+end_src

#+RESULTS:
: browse-url-firefox

* Hydras
** Text Scaling

This is an example of using [[https://github.com/abo-abo/hydra][Hydra]] to design a transient key binding for quickly adjusting the scale of the text on screen.  We define a hydra that is bound to =C-s t s= and, once activated, =j= and =k= increase and decrease the text scale.  You can press any other key (or =f= specifically) to exit the transient key map.

#+begin_src emacs-lisp
  
  (use-package hydra)
  
  (defhydra hydra-text-scale (global-map "<f2>")
    "scale text"
    ("j" text-scale-increase "in")
    ("k" text-scale-decrease "out")
    ("f" nil "finished" :exit t))
  
#+end_src

* EMF keymaps
#+begin_src emacs-lisp
  (global-set-key (kbd "M-o") 'ace-window)
  (global-set-key (kbd "C-c a") 'org-agenda)
  (global-set-key (kbd "C-c c") 'org-capture)
  (defun run-translate-script-on-region ()
    (interactive)
    (shell-command-on-region (region-beginning) (region-end)t "translate" nil nil nil t nil)
    )
  
  (global-set-key (kbd "C-c t") 'run-translate-script-on-region)
  #+end_src
* Abbrev-mode
Turn on abbrev-mode.  Use 
#+begin_src emacs-lisp
  (setq-default abbrev-mode t)
  (setq abbrev-file-name                         ;; tell emacs where to read abbrev
        "~/Dropbox/emacs/config/abbrev-defs")    ;; definitions from...
  (setq save-abbrevs 'silent)  ;; save abbrevs when files are saved
#+end_src

* Bookmarks
#+begin_src emacs-lisp
  (setq bookmark-default-file                      ;; tell emacs where to save bookmarks
        "~/Dropbox/emacs/config/bookmarks")
  (setq bookmark-save-flag 1)                      ;; save bookmarks as you go along
  
#+end_src


#+RESULTS:
: 1

#+begin_src emacs-lisp

(message "Init file finished loading!")

#+end_src

* Avy
From this web page: https://cestlaz.github.io/posts/using-emacs-7-avy/ in the comment by firesofmay
begin_src emacs-lisp
(use-package avy
  :ensure t
  :init (avy-setup-default)
  :config (progn
  ;; Makes it easier to see the candidates
  (setq avy-background t)
  ;; Shows both the candidates over the text
  (setq avy-styles-alist '((avy-goto-char-2 . at-full))))
  :bind (;; Search by 2 chars
  ("C-'" . avy-goto-char-2))
  ;; Search by first char of a word
  ("C-\"" . avy-goto-word-1))
end_src

#+RESULTS:
: avy-goto-word-1

* Interface changes
** Type y or n instead of yes or no
#+begin_src emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)  ;; type y or n instead of yes or no
#+end_src
* Modify kill-buffer 
This enables me to kill the current buffer with C-x k without then having to select the buffer
The code comes from [[https://emacs.stackexchange.com/questions/54979/killing-current-buffer-reliably][StackExchange: killing current buffer reliably]]
#+begin_src emacs-lisp
(bind-key "k" (lambda () (interactive) (kill-buffer (current-buffer))) ctl-x-map)
#+end_src

#+RESULTS:
| lambda | nil | (interactive) | (kill-buffer (current-buffer)) |

* Set refile targets
This identifies the files to which I can refile using org-refile (C-c C-w)
The code comes from [[https://stackoverflow.com/questions/22200312/refile-from-one-file-to-other][StackOverflow: refile from one file to another]]
Also Aaron Bieber [[https://blog.aaronbieber.com/2017/03/19/organizing-notes-with-refile.html][Organising notes with refile]]
#+begin_src emacs-lisp
(setq org-refile-targets
      '((nil :maxlevel . 2)
        (org-agenda-files :maxlevel . 2)))
#+end_src

#+RESULTS:
: ((nil :maxlevel . 2) (org-agenda-files :maxlevel . 2))
* Open text files in org-mode
This code comes from [[https://www.emacswiki.org/emacs/AutoModeAlist][here]]

#+begin_src emacs-lisp
  (add-to-list 'auto-mode-alist 
               '("\\.txt\\'" . org-mode))
#+end_src
* YA Snippets
This code comes from [[https://github.com/joaotavora/yasnippet]]
#+begin_src emacs-lisp
  (use-package yasnippet)
  (use-package yasnippet-snippets)
  (add-to-list 'load-path
                      "~/.emacs.d/plugins/yasnippet")  
  (yas-reload-all)
  (add-hook 'org-mode-hook #'yas-minor-mode)
  (yas-global-mode 1)

  #+end_src

#+RESULTS:
: t
* PlantUML
#+begin_src emacs-lisp
(use-package plantuml-mode)
(setq org-plantuml-jar-path (expand-file-name "/home/tedflint/.plantuml/plantuml.jar"))
(add-to-list 'org-src-lang-modes '("plantuml" . plantuml))
(org-babel-do-load-languages 'org-babel-load-languages '((plantuml . t)))
#+end_src

#+RESULTS:

* Stop emacs asking whether you want to evaluate a code block
#+begin_src emacs-lisp
(setq org-confirm-babel-evaluate nil)
#+end_src

#+RESULTS:

* Install pdf-tools as an alternative to doc-view
#+begin_src emacs-lisp
(use-package pdf-tools)
(use-package org-noter
  :config
  ;; Your org-noter config ........
  (require 'org-noter-pdftools))

(use-package org-pdftools
  :hook (org-mode . org-pdftools-setup-link))

(use-package org-noter-pdftools
  :after org-noter
  :config
  ;; Add a function to ensure precise note is inserted
  (defun org-noter-pdftools-insert-precise-note (&optional toggle-no-questions)
    (interactive "P")
    (org-noter--with-valid-session
     (let ((org-noter-insert-note-no-questions (if toggle-no-questions
                                                   (not org-noter-insert-note-no-questions)
                                                 org-noter-insert-note-no-questions))
           (org-pdftools-use-isearch-link t)
           (org-pdftools-use-freestyle-annot t))
       (org-noter-insert-note (org-noter--get-precise-info)))))

  ;; fix https://github.com/weirdNox/org-noter/pull/93/commits/f8349ae7575e599f375de1be6be2d0d5de4e6cbf
  (defun org-noter-set-start-location (&optional arg)
    "When opening a session with this document, go to the current location.
With a prefix ARG, remove start location."
    (interactive "P")
    (org-noter--with-valid-session
     (let ((inhibit-read-only t)
           (ast (org-noter--parse-root))
           (location (org-noter--doc-approx-location (when (called-interactively-p 'any) 'interactive))))
       (with-current-buffer (org-noter--session-notes-buffer session)
         (org-with-wide-buffer
          (goto-char (org-element-property :begin ast))
          (if arg
              (org-entry-delete nil org-noter-property-note-location)
            (org-entry-put nil org-noter-property-note-location
                           (org-noter--pretty-print-location location))))))))
  (with-eval-after-load 'pdf-annot
    (add-hook 'pdf-annot-activate-handler-functions #'org-noter-pdftools-jump-to-note)))
#+end_src
* Recent files
#+begin_src emacs-lisp
(require 'recentf)
(recentf-mode 1)
(setq recentf-max-menu-items 25)
(global-set-key (kbd "C-c r") 'recentf-open-files)

#+end_src
* Stop prompting for confirmation before evaluating bash code blocks
#+begin_src emacs-lisp
(defun my-org-confirm-babel-evaluate (lang body)
  (not (string= lang "bash")))  ;don't ask for bash
(setq org-confirm-babel-evaluate #'my-org-confirm-babel-evaluate)
#+end_src

#+RESULTS:
: my-org-confirm-babel-evaluate
* Create a standard format for HTML exports
#+begin_src emacs-lisp 
(setq org-html-head 
"<meta http-equiv='X-UA-Compatible' content='IE=edge' /><meta content='width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no' name='viewport' />
<style>
    html {
        touch-action: manipulation;
        -webkit-text-size-adjust: 100%;
    }
    body {
        padding: 0;
        margin: 0;
        background: #111;
        color: #bbff99;
        font-weight: normal;
        font-size: 15px;
        font-family: 'San Francisco', 'Roboto', 'Arial', sans-serif;
    }
    h2,
    h3,
    h4,
    h5,
    h6 {
        font-family: 'Trebuchet MS', Verdana, sans-serif;
        color: #ff99bb;
        padding: 0;
        margin: 20px 0 10px 0;
        font-size: 1.1em;
    }
    h2 {
        margin: 30px 0 10px 0;
        font-size: 1.2em;
    }
    a {
        color: #0000EE;
        text-decoration: none;
    }
    p {
        margin: 6px 0;
        text-align: justify;
    }
    ul,
    ol {
        margin: 0;
        text-align: justify;
    }
    ul > li > code {
        color: black;
    }
    pre {
        white-space: pre-wrap;
    }
    #content {
        width: 96%;
        max-width: 1000px;
        margin: 2% auto 6% auto;
        background: black;
        border-radius: 2px;
        border-right: 1px solid black;
        border-bottom: 2px solid black;
        padding: 0 115px 150px 115px;
        box-sizing: border-box;
    }
    #postamble {
        display: none;
    }
    h1.title {
        background-color: #100;
        color: white;
        margin: 0 -115px;
        padding: 60px 0;
        font-weight: normal;
        font-size: 2em;
        border-top-left-radius: 2px;
        border-top-right-radius: 2px;
    }
    @media (max-width: 1050px) {
        #content {
            padding: 0 70px 100px 70px;
        }
        h1.title {
            margin: 0 -70px;
        }
    }
    @media (max-width: 800px) {
        #content {
            width: 100%;
            margin-top: 0;
            margin-bottom: 0;
            padding: 0 4% 60px 4%;
        }
        h1.title {
            margin: 0 -5%;
            padding: 40px 5%;
        }
    }
    pre,
    .verse {
        box-shadow: none;
        background-color: #333;
        border: 1px solid red;
        color: violet;
        padding: 10px;
        font-family: monospace;
        overflow: auto;
        margin: 6px 0;
    }
    #table-of-contents {
        margin-bottom: 50px;
        margin-top: 50px;
    }
    #table-of-contents h2 {
        margin-bottom: 5px;
    }
    #text-table-of-contents ul {
        padding-left: 15px;
    }
    #text-table-of-contents > ul {
        padding-left: 0;
    }
    #text-table-of-contents li {
        list-style-type: none;
    }
    #text-table-of-contents a {
        color: scarlet;
        font-size: 0.95em;
        text-decoration: none;
    }
    table {
        border-color: black;
        font-size: 0.95em;
    }
    table thead {
        color: #586b82;
    }
    table tbody tr:nth-child(even) {
        background: #010;
    }
    table tbody tr:hover {
        background: black !important;
        color: white;
    }
    table .left {
        text-align: left;
    }
    table .right {
        text-align: right;
    }
    .todo {
        font-family: inherit;
        color: inherit;
    }
    .done {
        color: inherit;
    }
    .tag {
        background: initial;
    }
    .tag > span {
        background-color: seagreen;
        font-family: monospace;
        padding-left: 7px;
        padding-right: 7px;
        border-radius: 2px;
        float: right;
        margin-left: 5px;
    }
    #text-table-of-contents .tag > span {
        float: none;
        margin-left: 0;
    }
    .timestamp {
        color: #7c8ca1;
    }
    @media print {
        @page {
            margin-bottom: 3cm;
            margin-top: 3cm;
            margin-left: 2cm;
            margin-right: 2cm;
            font-size: 10px;
        }
        #content {
            border: none;
        }
    }
</style>")

#+end_src

#+RESULTS:
#+begin_example
<meta http-equiv='X-UA-Compatible' content='IE=edge' /><meta content='width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no' name='viewport' />
<style>
    html {
        touch-action: manipulation;
        -webkit-text-size-adjust: 100%;
    }
    body {
        padding: 0;
        margin: 0;
        background: #111;
        color: #bbff99;
        font-weight: normal;
        font-size: 15px;
        font-family: 'San Francisco', 'Roboto', 'Arial', sans-serif;
    }
    h2,
    h3,
    h4,
    h5,
    h6 {
        font-family: 'Trebuchet MS', Verdana, sans-serif;
        color: #ff99bb;
        padding: 0;
        margin: 20px 0 10px 0;
        font-size: 1.1em;
    }
    h2 {
        margin: 30px 0 10px 0;
        font-size: 1.2em;
    }
    a {
        color: #0000EE;
        text-decoration: none;
    }
    p {
        margin: 6px 0;
        text-align: justify;
    }
    ul,
    ol {
        margin: 0;
        text-align: justify;
    }
    ul > li > code {
        color: black;
    }
    pre {
        white-space: pre-wrap;
    }
    #content {
        width: 96%;
        max-width: 1000px;
        margin: 2% auto 6% auto;
        background: black;
        border-radius: 2px;
        border-right: 1px solid black;
        border-bottom: 2px solid black;
        padding: 0 115px 150px 115px;
        box-sizing: border-box;
    }
    #postamble {
        display: none;
    }
    h1.title {
        background-color: #100;
        color: white;
        margin: 0 -115px;
        padding: 60px 0;
        font-weight: normal;
        font-size: 2em;
        border-top-left-radius: 2px;
        border-top-right-radius: 2px;
    }
    @media (max-width: 1050px) {
        #content {
            padding: 0 70px 100px 70px;
        }
        h1.title {
            margin: 0 -70px;
        }
    }
    @media (max-width: 800px) {
        #content {
            width: 100%;
            margin-top: 0;
            margin-bottom: 0;
            padding: 0 4% 60px 4%;
        }
        h1.title {
            margin: 0 -5%;
            padding: 40px 5%;
        }
    }
    pre,
    .verse {
        box-shadow: none;
        background-color: #333;
        border: 1px solid red;
        color: violet;
        padding: 10px;
        font-family: monospace;
        overflow: auto;
        margin: 6px 0;
    }
    #table-of-contents {
        margin-bottom: 50px;
        margin-top: 50px;
    }
    #table-of-contents h2 {
        margin-bottom: 5px;
    }
    #text-table-of-contents ul {
        padding-left: 15px;
    }
    #text-table-of-contents > ul {
        padding-left: 0;
    }
    #text-table-of-contents li {
        list-style-type: none;
    }
    #text-table-of-contents a {
        color: scarlet;
        font-size: 0.95em;
        text-decoration: none;
    }
    table {
        border-color: black;
        font-size: 0.95em;
    }
    table thead {
        color: #586b82;
    }
    table tbody tr:nth-child(even) {
        background: #010;
    }
    table tbody tr:hover {
        background: black !important;
        color: white;
    }
    table .left {
        text-align: left;
    }
    table .right {
        text-align: right;
    }
    .todo {
        font-family: inherit;
        color: inherit;
    }
    .done {
        color: inherit;
    }
    .tag {
        background: initial;
    }
    .tag > span {
        background-color: seagreen;
        font-family: monospace;
        padding-left: 7px;
        padding-right: 7px;
        border-radius: 2px;
        float: right;
        margin-left: 5px;
    }
    #text-table-of-contents .tag > span {
        float: none;
        margin-left: 0;
    }
    .timestamp {
        color: #7c8ca1;
    }
    @media print {
        @page {
            margin-bottom: 3cm;
            margin-top: 3cm;
            margin-left: 2cm;
            margin-right: 2cm;
            font-size: 10px;
        }
        #content {
            border: none;
        }
    }
</style>
#+end_example
<meta content='width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no' name='viewport'>
<style>html{touch-action:manipulation;-webkit-text-size-adjust:100%}body{padding:0;margin:0;background:#111;color:yellow;font-weight:normal;font-size:15px;font-family:'San Francisco','Roboto','Arial',sans-serif}h2,h3,h4,h5,h6{font-family:'Trebuchet MS',Verdana,sans-serif;color:#fff;padding:0;margin:20px 0 10px 0;font-size:1.1em}h2{margin:30px 0 10px 0;font-size:1.2em}a{color:blue;text-decoration:none}p{margin:6px 0;text-align:justify}ul,ol{margin:0;text-align:justify}ul>li>code{color:#fff}pre{white-space:pre-wrap}#content{width:96%;max-width:1000px;margin:2% auto 6% auto;background:black;border-radius:2px;border-right:1px solid #e2e9f0;border-bottom:2px solid #e2e9f0;padding:0 115px 150px 115px;box-sizing:border-box}#postamble{display:none}h1.title{background-color:#111;color:#fff;margin:0 -115px;padding:60px 0;font-weight:normal;font-size:2em;border-top-left-radius:2px;border-top-right-radius:2px}@media (max-width: 1050px){#content{padding:0 70px 100px 70px}h1.title{margin:0 -70px}}@media (max-width: 800px){#content{width:100%;margin-top:0;margin-bottom:0;padding:0 4% 60px 4%}h1.title{margin:0 -5%;padding:40px 5%}}pre,.verse{box-shadow:none;background-color:#200;border:1px solid #e2e9f0;color:#586b82;padding:10px;font-family:monospace;overflow:auto;margin:6px 0}#table-of-contents{margin-bottom:50px;margin-top:50px}#table-of-contents h2{margin-bottom:5px}#text-table-of-contents ul{padding-left:15px}#text-table-of-contents>ul{padding-left:0}#text-table-of-contents li{list-style-type:none}#text-table-of-contents a{color:#7c8ca1;font-size:0.95em;text-decoration:none}table{border-color:#586b82;font-size:0.95em}table thead{color:#586b82}table tbody tr:nth-child(even){background:#010}table tbody tr:hover{background:#586b82!important;color:white}table .left{text-align:left}table .right{text-align:right}.todo{font-family:inherit;color:inherit}.done{color:inherit}.tag{background:initial}.tag>span{background-color:#001;font-family:monospace;padding-left:7px;padding-right:7px;border-radius:2px;float:right;margin-left:5px}#text-table-of-contents .tag>span{float:none;margin-left:0}.timestamp{color:#000}@media print{@page{margin-bottom:3cm;margin-top:3cm;margin-left:2cm;margin-right:2cm;font-size:10px}#content{border:none}}</style>
* Automatically save buffer-file-name to a file
Written by EMF in EMACS Lisp to create an easy way to access files that I have recently worked on.

#+begin_src emacs-lisp
(defun my-append-string-to-file (s filename)
    (with-temp-buffer
        (insert "[[")
        (insert s)
        (insert "]]\n")
        (write-region (point-min) (point-max) filename t)))

(defun capture-buffer-name ()
    (interactive)
    (my-append-string-to-file (buffer-file-name) "/home/tedflint/Dropbox/emacs/config/recent-files.txt"))

(global-set-key (kbd "C-x C-@") 'capture-buffer-name)
(add-hook 'after-save-hook 'capture-buffer-name)
#+end_src

#+RESULTS:
| capture-buffer-name | efs/org-babel-tangle-config | rmail-after-save-hook | doom-modeline-update-vcs-text | doom-modeline-update-vcs-icon | doom-modeline-update-buffer-file-name |

* Set up a Prolog coding environment
#+begin_src emacs-lisp
(autoload 'run-prolog "prolog" "Start a Prolog sub-process." t)
(autoload 'prolog-mode "prolog" "Major mode for editing Prolog programs." t)
(autoload 'mercury-mode "prolog" "Major mode for editing Mercury programs." t)
(setq prolog-system 'swi)
(setq auto-mode-alist (append '(("\\.pl$" . prolog-mode)
                                ("\\.m$" . mercury-mode))
                               auto-mode-alist))
#+end_src

* Define the custom capture templates

#+begin_src emacs-lisp
(setq org-default-notes-file "~/Dropbox/emacs/org/todo.txt")
(setq org-capture-templates
       '(("t" "todo" entry (file org-default-notes-file)
	  "* TODO %?\n%u\n%a\n")
	 ("d" "Diary" entry (file org-agenda-diary-file)
	  "%?\n")
	 ("i" "Idea" entry (file org-default-notes-file)
	  "* %? :IDEA: \n%t")
	 ("n" "Next Task" entry (file+headline org-default-notes-file "Tasks")
	  "** NEXT %? \nDEADLINE: %t")))
 (setq view-diary-entries-initially t
       mark-diary-entries-in-calendar t
       number-of-diary-entries 7)
 (add-hook 'diary-display-hook 'fancy-diary-display)
 (add-hook 'today-visible-calendar-hook 'calendar-mark-today)


#+end_src

* Define an idea capture function
#+begin_src emacs-lisp
(defun capture-idea ()
  "Capture an idea and append it to the ideas file."
  (interactive)
  (let ((idea (read-string "Enter your idea: ")))
    (with-current-buffer (find-file-noselect "/home/tedflint/Dropbox/emacs/org/ideas.txt")
      (goto-char (point-max))
      (insert (format "[%s] %s" (format-time-string "%Y-%m-%d %T") idea))
      (newline))))

(global-set-key (kbd "C-c i") 'capture-idea)

#+end_src

#+RESULTS:
: capture-idea

* Set the calendar week start day to Monday (from Sunday)
#+begin_src emacs-lisp
(setq calendar-week-start-day 1)
#+end_src

#+RESULTS:
: 1
* Export org agenda views
#+begin_src emacs-lisp
(setq org-agenda-custom-commands
      '(("n" "Agenda and all TODOs"
         ((agenda "")
          (alltodo ""))
         nil
         ("~/Dropbox/agenda.html"))))
#+end_src

#+RESULTS:
| n | Agenda and all TODOs | ((agenda ) (alltodo )) | nil | (~/agenda.html) |

* Run xmodmap to remap CapsLock to Control

#+begin_src emacs-lisp

  (if (file-exists-p "/home/tedflint/.xmodmap")
      (shell-command "xmodmap /home/tedflint/.xmodmap")
         (progn
            (shell-command "cd /home/tedflint/")
            (shell-command "ln -s /home/tedflint/Dropbox/emacs/config/.xmodmap /home/tedflint/.xmodmap") 
            (shell-command "xmodmap /home/tedflint/.xmodmap")))
#+end_src

* Disable electric-indent-mode to prevent annoying automatic indentation behaviour

#+begin_src emacs-lisp
(setq electric-indent-mode nil)
#+end_src

#+RESULTS:

* Clojure development environment
#+begin_src emacs-lisp
 (defvar my-packages '(better-defaults
                      projectile
                      clojure-mode
                      cider))

(dolist (p my-packages)
  (unless (package-installed-p p)
    (package-install p)))
#+end_src

#+RESULTS:

* Set Emacs to save the sesson on exit
#+begin_src emacs-lisp
(setq desktop-path '("~/Dropbox/emacs/config/"))
(desktop-save-mode 1)
#+end_src

#+RESULTS:
: t

#+RESULTS:
| lambda | nil | (interactive) | (insert 8364) |
